***************
*** 38,53 ****
    char ary[];
  };
  
- #define RSTR_SET_TYPE_FLAG(s, type) (RSTR_UNSET_TYPE_FLAG(s), (s)->flags |= MRB_STR_##type)
- #define RSTR_UNSET_TYPE_FLAG(s) ((s)->flags &= ~(MRB_STR_TYPE_MASK|MRB_STR_EMBED_LEN_MASK))
  
- #define RSTR_EMBED_P(s) ((s)->flags & MRB_STR_EMBED)
- #define RSTR_SET_EMBED_FLAG(s) ((s)->flags |= MRB_STR_EMBED)
- #define RSTR_UNSET_EMBED_FLAG(s) ((s)->flags &= ~(MRB_STR_EMBED|MRB_STR_EMBED_LEN_MASK))
  #define RSTR_SET_EMBED_LEN(s, n) do {\
    size_t tmp_n = (n);\
-   (s)->flags &= ~MRB_STR_EMBED_LEN_MASK;\
-   (s)->flags |= (tmp_n) << MRB_STR_EMBED_LEN_SHIFT;\
  } while (0)
  #define RSTR_SET_LEN(s, n) do {\
    if (RSTR_EMBED_P(s)) {\
--- 38,53 ----
    char ary[];
  };
  
+ #define RSTR_SET_TYPE_FLAG(s, type) (RSTR_UNSET_TYPE_FLAG(s), MRB_OBJECT_SET_FLAG(s, MRB_STR_##type))
+ #define RSTR_UNSET_TYPE_FLAG(s) (MRB_OBJECT_UNSET_FLAG(s, (MRB_STR_TYPE_MASK|MRB_STR_EMBED_LEN_MASK)))
  
+ #define RSTR_EMBED_P(s) (MRB_OBJECT_GET_FLAG(s) & MRB_STR_EMBED)
+ #define RSTR_SET_EMBED_FLAG(s) (MRB_OBJECT_SET_FLAG(s, MRB_STR_EMBED))
+ #define RSTR_UNSET_EMBED_FLAG(s) (MRB_OBJECT_UNSET_FLAG(s, (MRB_STR_EMBED|MRB_STR_EMBED_LEN_MASK)))
  #define RSTR_SET_EMBED_LEN(s, n) do {\
    size_t tmp_n = (n);\
+   MRB_OBJECT_UNSET_FLAG(s, MRB_STR_EMBED_LEN_MASK);             \
+   MRB_OBJECT_SET_FLAG(s, (tmp_n) << MRB_STR_EMBED_LEN_SHIFT);   \
  } while (0)
  #define RSTR_SET_LEN(s, n) do {\
    if (RSTR_EMBED_P(s)) {\
***************
*** 59,88 ****
  } while (0)
  #define RSTR_EMBED_PTR(s) (((struct RStringEmbed*)(s))->ary)
  #define RSTR_EMBED_LEN(s)\
-   (mrb_int)(((s)->flags & MRB_STR_EMBED_LEN_MASK) >> MRB_STR_EMBED_LEN_SHIFT)
  #define RSTR_EMBEDDABLE_P(len) ((len) <= RSTRING_EMBED_LEN_MAX)
  
  #define RSTR_PTR(s) ((RSTR_EMBED_P(s)) ? RSTR_EMBED_PTR(s) : (s)->as.heap.ptr)
  #define RSTR_LEN(s) ((RSTR_EMBED_P(s)) ? RSTR_EMBED_LEN(s) : (s)->as.heap.len)
  #define RSTR_CAPA(s) (RSTR_EMBED_P(s) ? RSTRING_EMBED_LEN_MAX : (s)->as.heap.aux.capa)
  
- #define RSTR_SHARED_P(s) ((s)->flags & MRB_STR_SHARED)
- #define RSTR_SET_SHARED_FLAG(s) ((s)->flags |= MRB_STR_SHARED)
- #define RSTR_UNSET_SHARED_FLAG(s) ((s)->flags &= ~MRB_STR_SHARED)
  
- #define RSTR_FSHARED_P(s) ((s)->flags & MRB_STR_FSHARED)
- #define RSTR_SET_FSHARED_FLAG(s) ((s)->flags |= MRB_STR_FSHARED)
- #define RSTR_UNSET_FSHARED_FLAG(s) ((s)->flags &= ~MRB_STR_FSHARED)
  
- #define RSTR_NOFREE_P(s) ((s)->flags & MRB_STR_NOFREE)
- #define RSTR_SET_NOFREE_FLAG(s) ((s)->flags |= MRB_STR_NOFREE)
- #define RSTR_UNSET_NOFREE_FLAG(s) ((s)->flags &= ~MRB_STR_NOFREE)
  
  #ifdef MRB_UTF8_STRING
- # define RSTR_ASCII_P(s) ((s)->flags & MRB_STR_ASCII)
- # define RSTR_SET_ASCII_FLAG(s) ((s)->flags |= MRB_STR_ASCII)
- # define RSTR_UNSET_ASCII_FLAG(s) ((s)->flags &= ~MRB_STR_ASCII)
- # define RSTR_WRITE_ASCII_FLAG(s, v) (RSTR_UNSET_ASCII_FLAG(s), (s)->flags |= v)
  # define RSTR_COPY_ASCII_FLAG(dst, src) RSTR_WRITE_ASCII_FLAG(dst, RSTR_ASCII_P(src))
  #else
  # define RSTR_ASCII_P(s) (void)0
--- 59,88 ----
  } while (0)
  #define RSTR_EMBED_PTR(s) (((struct RStringEmbed*)(s))->ary)
  #define RSTR_EMBED_LEN(s)\
+   (mrb_int)((MRB_OBJECT_GET_FLAG(s) & MRB_STR_EMBED_LEN_MASK) >> MRB_STR_EMBED_LEN_SHIFT)
  #define RSTR_EMBEDDABLE_P(len) ((len) <= RSTRING_EMBED_LEN_MAX)
  
  #define RSTR_PTR(s) ((RSTR_EMBED_P(s)) ? RSTR_EMBED_PTR(s) : (s)->as.heap.ptr)
  #define RSTR_LEN(s) ((RSTR_EMBED_P(s)) ? RSTR_EMBED_LEN(s) : (s)->as.heap.len)
  #define RSTR_CAPA(s) (RSTR_EMBED_P(s) ? RSTRING_EMBED_LEN_MAX : (s)->as.heap.aux.capa)
  
+ #define RSTR_SHARED_P(s) (MRB_OBJECT_GET_FLAG(s) & MRB_STR_SHARED)
+ #define RSTR_SET_SHARED_FLAG(s) (MRB_OBJECT_SET_FLAG(s, MRB_STR_SHARED))
+ #define RSTR_UNSET_SHARED_FLAG(s) (MRB_OBJECT_UNSET_FLAG(s, MRB_STR_SHARED))
  
+ #define RSTR_FSHARED_P(s) (MRB_OBJECT_GET_FLAG(s) & MRB_STR_FSHARED)
+ #define RSTR_SET_FSHARED_FLAG(s) (MRB_OBJECT_SET_FLAG(s, MRB_STR_FSHARED))
+ #define RSTR_UNSET_FSHARED_FLAG(s) (MRB_OBJECT_UNSET_FLAG(s, MRB_STR_FSHARED))
  
+ #define RSTR_NOFREE_P(s) (MRB_OBJECT_GET_FLAG(s) & MRB_STR_NOFREE)
+ #define RSTR_SET_NOFREE_FLAG(s) (MRB_OBJECT_SET_FLAG(s, MRB_STR_NOFREE))
+ #define RSTR_UNSET_NOFREE_FLAG(s) (MRB_OBJECT_UNSET_FLAG(s, MRB_STR_NOFREE))
  
  #ifdef MRB_UTF8_STRING
+ # define RSTR_ASCII_P(s) (MRB_OBJECT_GET_FLAG(s) & MRB_STR_ASCII)
+ # define RSTR_SET_ASCII_FLAG(s) (MRB_OBJECT_SET_FLAG(s, MRB_STR_ASCII))
+ # define RSTR_UNSET_ASCII_FLAG(s) (MRB_OBJECT_UNSET_FLAG(s, MRB_STR_ASCII))
+ # define RSTR_WRITE_ASCII_FLAG(s, v) (RSTR_UNSET_ASCII_FLAG(s), MRB_OBJECT_SET_FLAG(s, v))
  # define RSTR_COPY_ASCII_FLAG(dst, src) RSTR_WRITE_ASCII_FLAG(dst, RSTR_ASCII_P(src))
  #else
  # define RSTR_ASCII_P(s) (void)0
***************
*** 92,99 ****
  # define RSTR_COPY_ASCII_FLAG(dst, src) (void)0
  #endif
  
- #define RSTR_POOL_P(s) ((s)->flags & MRB_STR_POOL)
- #define RSTR_SET_POOL_FLAG(s) ((s)->flags |= MRB_STR_POOL)
  
  /**
   * Returns a pointer from a Ruby string
--- 92,99 ----
  # define RSTR_COPY_ASCII_FLAG(dst, src) (void)0
  #endif
  
+ #define RSTR_POOL_P(s) (MRB_OBJECT_GET_FLAG(s) & MRB_STR_POOL)
+ #define RSTR_SET_POOL_FLAG(s) (MRB_OBJECT_SET_FLAG(s, MRB_STR_POOL))
  
  /**
   * Returns a pointer from a Ruby string
